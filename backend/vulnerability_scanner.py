import re
import ast
from typing import List, Dict, Any
import json

class VulnerabilityScanner:
    def __init__(self):
        """Initialize the vulnerability scanner with detection patterns"""
        self.patterns = self._load_vulnerability_patterns()
        
    def _load_vulnerability_patterns(self) -> Dict[str, List[Dict]]:
        """Load vulnerability detection patterns for different languages"""
        return {
            'python': [
                {
                    'name': 'SQL Injection',
                    'pattern': r'execute\(.*\+.*\)|cursor\.execute\(.*\+.*\)',
                    'severity': 'critical',
                    'description': 'SQL injection vulnerability detected',
                    'cwe': 'CWE-89',
                    'line_pattern': r'execute\(.*\+.*\)'
                },
                {
                    'name': 'Command Injection',
                    'pattern': r'os\.system\(|subprocess\.call\(|subprocess\.Popen\(',
                    'severity': 'critical',
                    'description': 'Command injection vulnerability detected',
                    'cwe': 'CWE-78',
                    'line_pattern': r'os\.system\(|subprocess\.call\(|subprocess\.Popen\('
                },
                {
                    'name': 'Path Traversal',
                    'pattern': r'open\(.*\.\./|file\(.*\.\./',
                    'severity': 'high',
                    'description': 'Path traversal vulnerability detected',
                    'cwe': 'CWE-22',
                    'line_pattern': r'open\(.*\.\./|file\(.*\.\./'
                },
                {
                    'name': 'Hardcoded Credentials',
                    'pattern': r'password\s*=\s*[\'"][^\'"]+[\'"]|api_key\s*=\s*[\'"][^\'"]+[\'"]',
                    'severity': 'high',
                    'description': 'Hardcoded credentials detected',
                    'cwe': 'CWE-259',
                    'line_pattern': r'password\s*=\s*[\'"][^\'"]+[\'"]|api_key\s*=\s*[\'"][^\'"]+[\'"]'
                }
            ],
            'java': [
                {
                    'name': 'SQL Injection',
                    'pattern': r'executeQuery\(.*\+.*\)|executeUpdate\(.*\+.*\)',
                    'severity': 'critical',
                    'description': 'SQL injection vulnerability detected',
                    'cwe': 'CWE-89',
                    'line_pattern': r'executeQuery\(.*\+.*\)|executeUpdate\(.*\+.*\)'
                },
                {
                    'name': 'Command Injection',
                    'pattern': r'Runtime\.getRuntime\(\)\.exec\(|ProcessBuilder\(',
                    'severity': 'critical',
                    'description': 'Command injection vulnerability detected',
                    'cwe': 'CWE-78',
                    'line_pattern': r'Runtime\.getRuntime\(\)\.exec\(|ProcessBuilder\('
                },
                {
                    'name': 'Path Traversal',
                    'pattern': r'new File\(.*\.\./|FileInputStream\(.*\.\./',
                    'severity': 'high',
                    'description': 'Path traversal vulnerability detected',
                    'cwe': 'CWE-22',
                    'line_pattern': r'new File\(.*\.\./|FileInputStream\(.*\.\./'
                }
            ],
            'php': [
                {
                    'name': 'SQL Injection',
                    'pattern': r'mysql_query\(.*\$|mysqli_query\(.*\$|query\(.*\$',
                    'severity': 'critical',
                    'description': 'SQL injection vulnerability detected',
                    'cwe': 'CWE-89',
                    'line_pattern': r'mysql_query\(.*\$|mysqli_query\(.*\$|query\(.*\$'
                },
                {
                    'name': 'Command Injection',
                    'pattern': r'exec\(.*\$|system\(.*\$|shell_exec\(.*\$',
                    'severity': 'critical',
                    'description': 'Command injection vulnerability detected',
                    'cwe': 'CWE-78',
                    'line_pattern': r'exec\(.*\$|system\(.*\$|shell_exec\(.*\$'
                },
                {
                    'name': 'XSS',
                    'pattern': r'echo.*\$|print.*\$',
                    'severity': 'high',
                    'description': 'Cross-site scripting vulnerability detected',
                    'cwe': 'CWE-79',
                    'line_pattern': r'echo.*\$|print.*\$'
                }
            ],
            'cpp': [
                {
                    'name': 'Buffer Overflow',
                    'pattern': r'strcpy\(|strcat\(|sprintf\(',
                    'severity': 'critical',
                    'description': 'Buffer overflow vulnerability detected',
                    'cwe': 'CWE-120',
                    'line_pattern': r'strcpy\(|strcat\(|sprintf\('
                },
                {
                    'name': 'Integer Overflow',
                    'pattern': r'int\s+\w+\s*=\s*\d+;\s*\w+\s*\+=\s*\d+',
                    'severity': 'high',
                    'description': 'Integer overflow vulnerability detected',
                    'cwe': 'CWE-190',
                    'line_pattern': r'int\s+\w+\s*=\s*\d+;\s*\w+\s*\+=\s*\d+'
                }
            ],
            'c': [
                {
                    'name': 'Buffer Overflow',
                    'pattern': r'strcpy\(|strcat\(|sprintf\(',
                    'severity': 'critical',
                    'description': 'Buffer overflow vulnerability detected',
                    'cwe': 'CWE-120',
                    'line_pattern': r'strcpy\(|strcat\(|sprintf\('
                },
                {
                    'name': 'Use After Free',
                    'pattern': r'free\(.*\);.*\w+',
                    'severity': 'critical',
                    'description': 'Use after free vulnerability detected',
                    'cwe': 'CWE-416',
                    'line_pattern': r'free\(.*\);.*\w+'
                }
            ],
            'js': [
                {
                    'name': 'XSS',
                    'pattern': r'document\.write\(.*\$|innerHTML\s*=\s*.*\$',
                    'severity': 'high',
                    'description': 'Cross-site scripting vulnerability detected',
                    'cwe': 'CWE-79',
                    'line_pattern': r'document\.write\(.*\$|innerHTML\s*=\s*.*\$'
                },
                {
                    'name': 'SQL Injection',
                    'pattern': r'query\(.*\+.*\)|execute\(.*\+.*\)',
                    'severity': 'critical',
                    'description': 'SQL injection vulnerability detected',
                    'cwe': 'CWE-89',
                    'line_pattern': r'query\(.*\+.*\)|execute\(.*\+.*\)'
                }
            ]
        }
    
    def scan_code(self, code: str, language: str) -> List[Dict[str, Any]]:
        """Scan code for vulnerabilities based on language"""
        vulnerabilities = []
        
        # Get patterns for the language
        language_patterns = self.patterns.get(language, [])
        
        # Split code into lines for line number detection
        lines = code.split('\n')
        
        for pattern_info in language_patterns:
            # Find all matches in the code
            matches = re.finditer(pattern_info['pattern'], code, re.IGNORECASE)
            
            for match in matches:
                # Find the line number where this match occurs
                line_number = self._find_line_number(code, match.start())
                
                vulnerability = {
                    'type': pattern_info['name'],
                    'severity': pattern_info['severity'],
                    'description': pattern_info['description'],
                    'cwe': pattern_info['cwe'],
                    'line_number': line_number,
                    'line_content': lines[line_number - 1] if line_number <= len(lines) else '',
                    'match': match.group(),
                    'start_pos': match.start(),
                    'end_pos': match.end(),
                    'language': language
                }
                
                vulnerabilities.append(vulnerability)
        
        # Remove duplicates based on line number and type
        unique_vulnerabilities = []
        seen = set()
        for vuln in vulnerabilities:
            key = (vuln['line_number'], vuln['type'])
            if key not in seen:
                seen.add(key)
                unique_vulnerabilities.append(vuln)
        
        return unique_vulnerabilities
    
    def _find_line_number(self, code: str, position: int) -> int:
        """Find the line number for a given position in the code"""
        lines = code.split('\n')
        current_pos = 0
        
        for i, line in enumerate(lines):
            current_pos += len(line) + 1  # +1 for newline
            if current_pos > position:
                return i + 1
        
        return len(lines)
    
    def get_severity_score(self, severity: str) -> int:
        """Convert severity string to numeric score"""
        severity_scores = {
            'critical': 4,
            'high': 3,
            'medium': 2,
            'low': 1
        }
        return severity_scores.get(severity, 0)
    
    def calculate_f1_score(self, true_positives: int, false_positives: int, false_negatives: int) -> float:
        """Calculate F1 score for detection accuracy"""
        if true_positives + false_positives == 0:
            precision = 0
        else:
            precision = true_positives / (true_positives + false_positives)
        
        if true_positives + false_negatives == 0:
            recall = 0
        else:
            recall = true_positives / (true_positives + false_negatives)
        
        if precision + recall == 0:
            return 0
        
        return 2 * (precision * recall) / (precision + recall)
