'use client'

import { AlertTriangle, CheckCircle, Info, ExternalLink } from 'lucide-react'

interface VulnerabilityResultsProps {
  results: any
}

export default function VulnerabilityResults({ results }: VulnerabilityResultsProps) {
  const { vulnerabilities, total_vulnerabilities, severity_summary, ai_analysis } = results

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical':
        return 'text-red-600 bg-red-50 border-red-200'
      case 'high':
        return 'text-orange-600 bg-orange-50 border-orange-200'
      case 'medium':
        return 'text-yellow-600 bg-yellow-50 border-yellow-200'
      case 'low':
        return 'text-green-600 bg-green-50 border-green-200'
      default:
        return 'text-gray-600 bg-gray-50 border-gray-200'
    }
  }

  const getSeverityIcon = (severity: string) => {
    switch (severity) {
      case 'critical':
      case 'high':
        return <AlertTriangle className="w-4 h-4" />
      case 'medium':
      case 'low':
        return <Info className="w-4 h-4" />
      default:
        return <Info className="w-4 h-4" />
    }
  }

  if (total_vulnerabilities === 0) {
    return (
      <div className="text-center py-8">
        <CheckCircle className="w-16 h-16 text-green-500 mx-auto mb-4" />
        <h3 className="text-xl font-semibold text-green-800 mb-2">No Vulnerabilities Found!</h3>
        <p className="text-green-600">Your code appears to be secure. Great job!</p>
      </div>
    )
  }

  return (
    <div className="space-y-6">
      {/* Summary */}
      <div className="bg-gradient-to-r from-chakra-50 to-chakra-100 p-4 rounded-lg">
        <h4 className="font-semibold text-chakra-800 mb-3">Scan Summary</h4>
        <div className="grid grid-cols-2 gap-4 text-sm">
          <div>
            <span className="text-chakra-600">Total Vulnerabilities:</span>
            <span className="font-semibold text-chakra-800 ml-2">{total_vulnerabilities}</span>
          </div>
          <div>
            <span className="text-chakra-600">Risk Level:</span>
            <span className={`font-semibold ml-2 ${getSeverityColor(ai_analysis?.risk_assessment?.level || 'low')}`}>
              {ai_analysis?.risk_assessment?.level?.toUpperCase() || 'LOW'}
            </span>
          </div>
        </div>
      </div>

      {/* Severity Breakdown */}
      <div>
        <h4 className="font-semibold text-chakra-800 mb-3">Severity Breakdown</h4>
        <div className="space-y-2">
          {Object.entries(severity_summary).map(([severity, count]) => (
            <div key={severity} className="flex items-center justify-between p-2 bg-gray-50 rounded">
              <span className="capitalize text-gray-700">{severity}</span>
              <span className="font-semibold text-gray-900">{count as number}</span>
            </div>
          ))}
        </div>
      </div>

      {/* Vulnerabilities List */}
      <div>
        <h4 className="font-semibold text-chakra-800 mb-3">Detected Vulnerabilities</h4>
        <div className="space-y-3 max-h-64 overflow-y-auto">
          {vulnerabilities.map((vuln: any, index: number) => (
            <div key={index} className="border rounded-lg p-3 bg-white">
              <div className="flex items-start justify-between mb-2">
                <div className="flex items-center space-x-2">
                  {getSeverityIcon(vuln.severity)}
                  <span className="font-semibold text-gray-800">{vuln.type}</span>
                  <span className={`px-2 py-1 rounded-full text-xs border ${getSeverityColor(vuln.severity)}`}>
                    {vuln.severity}
                  </span>
                </div>
                <span className="text-xs text-gray-500">Line {vuln.line_number}</span>
              </div>
              
              <p className="text-sm text-gray-600 mb-2">{vuln.description}</p>
              
              <div className="text-xs text-gray-500 bg-gray-50 p-2 rounded font-mono">
                {vuln.line_content}
              </div>

              {vuln.cve_info && (
                <div className="mt-2 pt-2 border-t border-gray-200">
                  <div className="flex items-center justify-between text-xs">
                    <span className="text-gray-600">CVE: {vuln.cve_info.cve_id}</span>
                    <span className="text-gray-600">CVSS: {vuln.cve_info.cvss_score}</span>
                  </div>
                </div>
              )}
            </div>
          ))}
        </div>
      </div>

      {/* AI Analysis */}
      {ai_analysis && (
        <div>
          <h4 className="font-semibold text-chakra-800 mb-3">AI Analysis</h4>
          <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
            <p className="text-sm text-blue-800 mb-3">{ai_analysis.summary}</p>
            
            {ai_analysis.recommendations && ai_analysis.recommendations.length > 0 && (
              <div>
                <h5 className="font-semibold text-blue-800 mb-2">Recommendations:</h5>
                <ul className="text-sm text-blue-700 space-y-1">
                  {ai_analysis.recommendations.slice(0, 3).map((rec: string, index: number) => (
                    <li key={index} className="flex items-start">
                      <span className="text-blue-500 mr-2">â€¢</span>
                      {rec}
                    </li>
                  ))}
                </ul>
              </div>
            )}
          </div>
        </div>
      )}
    </div>
  )
}
